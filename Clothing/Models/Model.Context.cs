//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clothing.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Info> Infoes { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<AddCategory_Result> AddCategory(string name, Nullable<int> subcategory, string catPath, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var subcategoryParameter = subcategory.HasValue ?
                new ObjectParameter("subcategory", subcategory) :
                new ObjectParameter("subcategory", typeof(int));
    
            var catPathParameter = catPath != null ?
                new ObjectParameter("catPath", catPath) :
                new ObjectParameter("catPath", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddCategory_Result>("AddCategory", nameParameter, subcategoryParameter, catPathParameter, useridParameter);
        }
    
        public virtual int AddInfo(Nullable<System.DateTime> datepurchased, Nullable<double> purchaseprice, string notesII, string qrbarcode, Nullable<int> uid, Nullable<int> locationid, Nullable<int> itemid)
        {
            var datepurchasedParameter = datepurchased.HasValue ?
                new ObjectParameter("datepurchased", datepurchased) :
                new ObjectParameter("datepurchased", typeof(System.DateTime));
    
            var purchasepriceParameter = purchaseprice.HasValue ?
                new ObjectParameter("purchaseprice", purchaseprice) :
                new ObjectParameter("purchaseprice", typeof(double));
    
            var notesIIParameter = notesII != null ?
                new ObjectParameter("notesII", notesII) :
                new ObjectParameter("notesII", typeof(string));
    
            var qrbarcodeParameter = qrbarcode != null ?
                new ObjectParameter("qrbarcode", qrbarcode) :
                new ObjectParameter("qrbarcode", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var locationidParameter = locationid.HasValue ?
                new ObjectParameter("locationid", locationid) :
                new ObjectParameter("locationid", typeof(int));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInfo", datepurchasedParameter, purchasepriceParameter, notesIIParameter, qrbarcodeParameter, uidParameter, locationidParameter, itemidParameter);
        }
    
        public virtual int AddItem(string brand, string itemname, string color, string size, string fit, string material, string notes, string image, string careinstructions, string storeitemnumber, Nullable<int> categoriesid, Nullable<int> userid)
        {
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            var fitParameter = fit != null ?
                new ObjectParameter("fit", fit) :
                new ObjectParameter("fit", typeof(string));
    
            var materialParameter = material != null ?
                new ObjectParameter("material", material) :
                new ObjectParameter("material", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var careinstructionsParameter = careinstructions != null ?
                new ObjectParameter("careinstructions", careinstructions) :
                new ObjectParameter("careinstructions", typeof(string));
    
            var storeitemnumberParameter = storeitemnumber != null ?
                new ObjectParameter("storeitemnumber", storeitemnumber) :
                new ObjectParameter("storeitemnumber", typeof(string));
    
            var categoriesidParameter = categoriesid.HasValue ?
                new ObjectParameter("categoriesid", categoriesid) :
                new ObjectParameter("categoriesid", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddItem", brandParameter, itemnameParameter, colorParameter, sizeParameter, fitParameter, materialParameter, notesParameter, imageParameter, careinstructionsParameter, storeitemnumberParameter, categoriesidParameter, useridParameter);
        }
    
        public virtual int AddLocation(string name, Nullable<int> userid)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLocation", nameParameter, useridParameter);
        }
    
        public virtual int AddUser(string name, string email, string username, string password, string address, string phone, Nullable<int> role)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", nameParameter, emailParameter, usernameParameter, passwordParameter, addressParameter, phoneParameter, roleParameter);
        }
    
        public virtual ObjectResult<Category> GetCategoryById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetCategoryById", idParameter);
        }
    
        public virtual ObjectResult<Category> GetCategoryById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("GetCategoryById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Info> GetInfoById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Info>("GetInfoById", idParameter);
        }
    
        public virtual ObjectResult<Info> GetInfoById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Info>("GetInfoById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Item> GetItemById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("GetItemById", idParameter);
        }
    
        public virtual ObjectResult<Item> GetItemById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("GetItemById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Location> GetLocationById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("GetLocationById", idParameter);
        }
    
        public virtual ObjectResult<Location> GetLocationById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("GetLocationById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<User> GetUserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("GetUserById", idParameter);
        }
    
        public virtual ObjectResult<User> GetUserById(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("GetUserById", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<Category> ShowAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("ShowAllCategories");
        }
    
        public virtual ObjectResult<Category> ShowAllCategories(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category>("ShowAllCategories", mergeOption);
        }
    
        public virtual ObjectResult<Info> ShowAllInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Info>("ShowAllInfo");
        }
    
        public virtual ObjectResult<Info> ShowAllInfo(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Info>("ShowAllInfo", mergeOption);
        }
    
        public virtual ObjectResult<Item> ShowAllItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("ShowAllItems");
        }
    
        public virtual ObjectResult<Item> ShowAllItems(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Item>("ShowAllItems", mergeOption);
        }
    
        public virtual ObjectResult<Location> ShowAllLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("ShowAllLocation");
        }
    
        public virtual ObjectResult<Location> ShowAllLocation(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Location>("ShowAllLocation", mergeOption);
        }
    
        public virtual ObjectResult<User> ShowAllUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("ShowAllUser");
        }
    
        public virtual ObjectResult<User> ShowAllUser(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("ShowAllUser", mergeOption);
        }
    
        public virtual int UpdateCategories(Nullable<int> id, string name, Nullable<int> userid, Nullable<int> subcategory, string catpath, Nullable<int> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var subcategoryParameter = subcategory.HasValue ?
                new ObjectParameter("subcategory", subcategory) :
                new ObjectParameter("subcategory", typeof(int));
    
            var catpathParameter = catpath != null ?
                new ObjectParameter("catpath", catpath) :
                new ObjectParameter("catpath", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCategories", idParameter, nameParameter, useridParameter, subcategoryParameter, catpathParameter, isActiveParameter);
        }
    
        public virtual int UpdateInfo(Nullable<int> id, Nullable<System.DateTime> datepurchased, Nullable<double> purchaseprice, string notesII, string qrbarcode, Nullable<int> uid, Nullable<int> locationid, Nullable<int> itemid, Nullable<int> isactive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var datepurchasedParameter = datepurchased.HasValue ?
                new ObjectParameter("datepurchased", datepurchased) :
                new ObjectParameter("datepurchased", typeof(System.DateTime));
    
            var purchasepriceParameter = purchaseprice.HasValue ?
                new ObjectParameter("purchaseprice", purchaseprice) :
                new ObjectParameter("purchaseprice", typeof(double));
    
            var notesIIParameter = notesII != null ?
                new ObjectParameter("notesII", notesII) :
                new ObjectParameter("notesII", typeof(string));
    
            var qrbarcodeParameter = qrbarcode != null ?
                new ObjectParameter("qrbarcode", qrbarcode) :
                new ObjectParameter("qrbarcode", typeof(string));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var locationidParameter = locationid.HasValue ?
                new ObjectParameter("locationid", locationid) :
                new ObjectParameter("locationid", typeof(int));
    
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateInfo", idParameter, datepurchasedParameter, purchasepriceParameter, notesIIParameter, qrbarcodeParameter, uidParameter, locationidParameter, itemidParameter, isactiveParameter);
        }
    
        public virtual int UpdateItem(Nullable<int> id, string brand, string itemname, string color, string size, string fit, string material, string notes, string image, string careinstructions, string storeitemnumber, Nullable<int> categoriesid, Nullable<int> isactive, Nullable<int> userid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var brandParameter = brand != null ?
                new ObjectParameter("brand", brand) :
                new ObjectParameter("brand", typeof(string));
    
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            var fitParameter = fit != null ?
                new ObjectParameter("fit", fit) :
                new ObjectParameter("fit", typeof(string));
    
            var materialParameter = material != null ?
                new ObjectParameter("material", material) :
                new ObjectParameter("material", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("image", image) :
                new ObjectParameter("image", typeof(string));
    
            var careinstructionsParameter = careinstructions != null ?
                new ObjectParameter("careinstructions", careinstructions) :
                new ObjectParameter("careinstructions", typeof(string));
    
            var storeitemnumberParameter = storeitemnumber != null ?
                new ObjectParameter("storeitemnumber", storeitemnumber) :
                new ObjectParameter("storeitemnumber", typeof(string));
    
            var categoriesidParameter = categoriesid.HasValue ?
                new ObjectParameter("categoriesid", categoriesid) :
                new ObjectParameter("categoriesid", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateItem", idParameter, brandParameter, itemnameParameter, colorParameter, sizeParameter, fitParameter, materialParameter, notesParameter, imageParameter, careinstructionsParameter, storeitemnumberParameter, categoriesidParameter, isactiveParameter, useridParameter);
        }
    
        public virtual int UpdateLocation(Nullable<int> id, string name, Nullable<int> userid, Nullable<int> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLocation", idParameter, nameParameter, useridParameter, isActiveParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> id, string name, string email, string username, string password, string address, string phone, Nullable<int> role, Nullable<int> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var roleParameter = role.HasValue ?
                new ObjectParameter("role", role) :
                new ObjectParameter("role", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", idParameter, nameParameter, emailParameter, usernameParameter, passwordParameter, addressParameter, phoneParameter, roleParameter, isActiveParameter);
        }
    }
}
